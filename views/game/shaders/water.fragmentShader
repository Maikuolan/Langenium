uniform vec3 mirrorColor;
uniform sampler2D mirrorSampler;
varying vec4 mirrorCoord;

uniform sampler2D baseTexture;
uniform float baseSpeed;

uniform sampler2D noiseTexture;
uniform float noiseScale;

uniform sampler2D noiseTexture2;
uniform float noiseSpeed2;
uniform float noiseScale2;

uniform sampler2D noiseTexture3;
uniform float noiseSpeed3;
uniform float noiseScale3;

uniform float alpha;
uniform float time;
varying vec2 vUv;

float blendOverlay(float base, float blend) {
	return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.1 - blend ) ) );
}

void main() {
	
	vec2 uvTimeShift = vUv + vec2( -0.7, 1.5 ) * time * baseSpeed;
	vec4 noiseGeneratorTimeShift = texture2D( noiseTexture, uvTimeShift );
	vec2 uvNoiseTimeShift = vUv + noiseScale * vec2( noiseGeneratorTimeShift.r, noiseGeneratorTimeShift.g );
	vec4 baseColor = texture2D( baseTexture, uvNoiseTimeShift ) - 0.05 * vec4(1.0, 1.0, 1.0, 1.0); // Adjust light and dark

	vec2 uvTimeShift2 = vUv + vec2( 1.3, -1.7 ) * time * noiseSpeed2;	
	vec4 baseColor2 = texture2D( noiseTexture2, uvTimeShift2 ) - 0.22 * vec4(1.0, 1.0, 1.0, 1.0); // Adjust light and dark

	vec2 uvTimeShift3 = vUv + vec2( 1.3, -1.7 ) * time * noiseSpeed3;	
	vec4 baseColor3 = texture2D( noiseTexture3, uvTimeShift3 ) - 0.22 * vec4(1.0, 1.0, 1.0, 1.0); // Adjust light and dark

	vec4 finalColor = baseColor + vec4(blendOverlay(baseColor2.r,baseColor3.r),blendOverlay(baseColor2.g,baseColor3.g),blendOverlay(baseColor2.b,baseColor3.b), 1.0);
	finalColor.a = alpha;

	vec4 color = texture2DProj(mirrorSampler, mirrorCoord);
	color = vec4(blendOverlay(mirrorColor.r, color.r), blendOverlay(mirrorColor.g, color.g), blendOverlay(mirrorColor.b, color.b), 1.0);
	color.a = alpha; // 337

	// gl_FragColor = color;
	// gl_FragColor = texture2D( overlayTexture, vUv );
	gl_FragColor = finalColor * 1.95 + color * .55;
	

}