uniform vec3 mirrorColor;
uniform sampler2D mirrorSampler;
varying vec4 mirrorCoord;

uniform sampler2D baseTexture; // 337
uniform float baseSpeed;
uniform sampler2D noiseTexture;
uniform float noiseScale;
uniform float alpha;
uniform float time;

varying vec2 vUv;

float blendOverlay(float base, float blend) {
	return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.1 - blend ) ) );
}

void main() {

	vec4 color = texture2DProj(mirrorSampler, mirrorCoord);
	color = vec4(blendOverlay(mirrorColor.r, color.r), blendOverlay(mirrorColor.g, color.g), blendOverlay(mirrorColor.b, color.b), 1.0);
	color.a = alpha; // 337
	
	vec2 uvTimeShift = vUv + vec2( -0.7, 1.5 ) * time * baseSpeed;
	vec4 noiseGeneratorTimeShift = texture2D( noiseTexture, uvTimeShift );
	vec2 uvNoiseTimeShift = vUv + noiseScale * vec2( noiseGeneratorTimeShift.r, noiseGeneratorTimeShift.b );
	vec4 baseColor = texture2D( baseTexture, uvNoiseTimeShift );

	// gl_FragColor = color;
	// gl_FragColor = texture2D( overlayTexture, vUv );
	gl_FragColor = baseColor * .5 + color * .5;
	

}